namespace Jds.TestingUtils.Randomization;

/// <summary>
///   Methods extending <see cref="IRandomizationSource" /> to generate hexadecimal values.
/// </summary>
public static class HexRandomizationSourceExtensions
{
  internal static readonly char[] HexChars =
  {
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
  };

  /// <summary>
  ///   Gets a pseudo-random hexadecimal (<c>0</c> through <c>f</c>, lowercase) string having a specified length.
  /// </summary>
  /// <remarks>
  ///   <para>Useful for generating pseudo-random hash codes.</para>
  /// </remarks>
  /// <param name="randomizationSource">A <see cref="IRandomizationSource" /> providing values.</param>
  /// <param name="length">A string length.</param>
  /// <returns></returns>
  public static string Hexadecimal(this IRandomizationSource randomizationSource, int length)
  {
    return randomizationSource.RandomString(length, HexChars);
  }

  /// <summary>
  ///   Gets a pseudo-random hexadecimal string (<c>0</c> through <c>f</c>, lowercase,
  ///   via <see cref="Hexadecimal" />) having a length matching a hash generated by SHA-256, <c>64</c> characters.
  /// </summary>
  /// <param name="randomizationSource">A <see cref="IRandomizationSource" /> providing values.</param>
  /// <returns>A pseudo-random hash.</returns>
  public static string HashSha256(this IRandomizationSource randomizationSource)
  {
    const int length = 256 / 4;
    return randomizationSource.Hexadecimal(length);
  }

  /// <summary>
  ///   Gets a pseudo-random hexadecimal string (<c>0</c> through <c>f</c>, lowercase,
  ///   via <see cref="Hexadecimal" />) having a length matching a hash generated by SHA-384, <c>96</c> characters.
  /// </summary>
  /// <param name="randomizationSource">A <see cref="IRandomizationSource" /> providing values.</param>
  /// <returns>A pseudo-random hash.</returns>
  public static string HashSha384(this IRandomizationSource randomizationSource)
  {
    const int length = 384 / 4;
    return randomizationSource.Hexadecimal(length);
  }

  /// <summary>
  ///   Gets a pseudo-random hexadecimal string (<c>0</c> through <c>f</c>, lowercase,
  ///   via <see cref="Hexadecimal" />) having a length matching a hash generated by SHA-512, <c>128</c> characters.
  /// </summary>
  /// <param name="randomizationSource">A <see cref="IRandomizationSource" /> providing values.</param>
  /// <returns>A pseudo-random hash.</returns>
  public static string HashSha512(this IRandomizationSource randomizationSource)
  {
    const int length = 512 / 4;
    return randomizationSource.Hexadecimal(length);
  }
}
