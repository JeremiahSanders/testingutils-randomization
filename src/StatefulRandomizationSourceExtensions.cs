namespace Jds.TestingUtils.Randomization;

/// <summary>
///   Methods extending <see cref="IStatefulRandomizationSource{TState}" /> to provide monadic operations.
/// </summary>
public static class StatefulRandomizationSourceMonadExtensions
{
  /// <summary>
  ///   Creates a new <see cref="IStatefulRandomizationSource{TState}" /> having updated state generated by
  ///   <paramref name="mapper" />.
  /// </summary>
  /// <param name="statefulSource">A stateful randomization source.</param>
  /// <param name="mapper">A method which accepts the current state and returns the new state.</param>
  /// <typeparam name="TStateA">A current state type.</typeparam>
  /// <typeparam name="TStateB">A next state type.</typeparam>
  /// <returns>A new stateful randomization source.</returns>
  public static IStatefulRandomizationSource<TStateB> Map<TStateA, TStateB>(
    this IStatefulRandomizationSource<TStateA> statefulSource, Func<TStateA, TStateB> mapper)
    where TStateA : notnull where TStateB : notnull
  {
    var source = statefulSource is StatefulSource<TStateA> strongSource
      ? strongSource.RandomizationSource
      : statefulSource;

    return new StatefulSource<TStateB>(source, mapper(statefulSource.State));
  }

  /// <summary>
  ///   Creates a new <see cref="IStatefulRandomizationSource{TState}" /> using <paramref name="binder" />
  ///   based upon the current state value.
  /// </summary>
  /// <param name="statefulSource"></param>
  /// <param name="binder"></param>
  /// <typeparam name="TStateA"></typeparam>
  /// <typeparam name="TStateB"></typeparam>
  /// <returns></returns>
  public static IStatefulRandomizationSource<TStateB> Bind<TStateA, TStateB>(
    this IStatefulRandomizationSource<TStateA> statefulSource,
    Func<TStateA, IStatefulRandomizationSource<TStateB>> binder)
    where TStateA : notnull where TStateB : notnull
  {
    return binder(statefulSource.State);
  }

  /// <summary>
  ///   Creates a <see cref="IStatefulRandomizationSource{TState}" /> from this <see cref="IRandomizationSource" />
  ///   having an initial <see cref="IStatefulRandomizationSource{TState}.State" /> of <paramref name="state" />.
  /// </summary>
  /// <param name="source">This <see cref="IRandomizationSource" />.</param>
  /// <param name="state">An initial state value.</param>
  /// <typeparam name="TState">A state object.</typeparam>
  /// <returns>A <see cref="IStatefulRandomizationSource{TState}" />.</returns>
  public static IStatefulRandomizationSource<TState> WithState<TState>(this IRandomizationSource source, TState state)
    where TState : notnull
  {
    return new StatefulSource<TState>(source, state);
  }
}
